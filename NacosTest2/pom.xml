<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.12.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>org.example</groupId>
    <artifactId>NacosTest2</artifactId>
    <packaging>jar</packaging>

    <name>NacosTest2</name>
    <url>http://maven.apache.org</url>

    <properties>
        <!--        https://baijiahao.baidu.com/s?id=1771358714767361684&wfr=spider&for=pc springboot对应springCloud版本-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring-cloud.version>Hoxton.SR12</spring-cloud.version>
        <spring-cloud-alibaba.version>2.2.8.RELEASE</spring-cloud-alibaba.version>
        <alibaba-nacos.version>2.2.8.RELEASE</alibaba-nacos.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.20</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>${spring-cloud.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>

        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-alibaba-dependencies</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
        <!--        注册中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
            <version>${alibaba-nacos.version}</version>
        </dependency>
        <!--        配置中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
            <version>${alibaba-nacos.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-loadbalancer</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- maven打包插件 -> 将整个工程打成一个 fatjar -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <version>1.0.0</version>-->
            <!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
            <!--&lt;!&ndash;                <executions>&ndash;&gt;-->
            <!--&lt;!&ndash;                    <execution>&ndash;&gt;-->
            <!--&lt;!&ndash;                        <id>build-image</id>&ndash;&gt;-->
            <!--&lt;!&ndash;                        &lt;!&ndash;将插件绑定在package阶段，换言之，只要执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;                        &lt;!&ndash;等同于命令：mvn clean package docker:build -Dmaven.test.skip=true	&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;                        <phase>package</phase>&ndash;&gt;-->
            <!--&lt;!&ndash;                        <goals>&ndash;&gt;-->
            <!--&lt;!&ndash;                            <goal>build</goal>&ndash;&gt;-->
            <!--&lt;!&ndash;                        </goals>&ndash;&gt;-->
            <!--&lt;!&ndash;                    </execution>&ndash;&gt;-->
            <!--&lt;!&ndash;                </executions>&ndash;&gt;-->
            <!--                <configuration>-->
            <!--                    &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
            <!--                    <imageName>docker-${project.artifactId}</imageName>-->
            <!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
            <!--                    <imageTags>-->
            <!--                        <imageTag>latest</imageTag>-->
            <!--                    </imageTags>-->
            <!--                    &lt;!&ndash; 指定Dockerfile路径 ${project.basedir}:pom.xml所在的目录&ndash;&gt;-->
            <!--                    <dockerDirectory>${project.basedir}</dockerDirectory>-->
            <!--                    &lt;!&ndash;指定远程docker环境地址&ndash;&gt;-->
            <!--                    <dockerHost>http://127.0.0.1:2375</dockerHost>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
        </plugins>
    </build>


</project>
